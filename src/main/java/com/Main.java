package com;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class is responsible for processing sales data and generating reports.
 * It reads the files generated by GenerateInfoFiles and creates two reports:
 * 1. A report of salesmen sorted by sales amount (descending)
 * 2. A report of products sorted by quantity sold (descending)
 */
public class Main {
    
    // Constants for file names
    private static final String PRODUCTS_FILE_NAME = "products.txt";
    private static final String SALESMEN_INFO_FILE_NAME = "salesmen_info.txt";
    private static final String SALESMAN_FILE_PREFIX = "salesman_";
    private static final String SALESMEN_REPORT_FILE_NAME = "salesmen_report.csv";
    private static final String PRODUCTS_REPORT_FILE_NAME = "products_report.csv";
    
    /**
     * Main method to execute the report generation process.
     * @param args Command line arguments (not used)
     */
    public static void main(String[] args) {
        try {
            // Read product information
            Map<String, Product> products = readProductsFile();
            
            // Read salesman information
            Map<String, Salesman> salesmen = readSalesmenInfoFile();
            
            // Process sales files and calculate totals
            processSalesFiles(products, salesmen);
            
            // Generate reports
            generateSalesmenReport(salesmen);
            generateProductsReport(products);
            
            System.out.println("Report generation completed successfully.");
        } catch (IOException e) {
            System.err.println("Error generating reports: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Reads the products file and creates a map of product ID to Product object.
     * 
     * @return Map of product ID to Product object
     * @throws IOException If there's an error reading the file
     */
    private static Map<String, Product> readProductsFile() throws IOException {
        Map<String, Product> products = new HashMap<>();
        File file = new File(PRODUCTS_FILE_NAME);
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(";");
                if (parts.length == 3) {
                    String id = parts[0];
                    String name = parts[1];
                    double price = Double.parseDouble(parts[2]);
                    
                    products.put(id, new Product(id, name, price));
                }
            }
        }
        
        return products;
    }
    
    /**
     * Reads the salesmen information file and creates a map of document number to Salesman object.
     * 
     * @return Map of document number to Salesman object
     * @throws IOException If there's an error reading the file
     */
    private static Map<String, Salesman> readSalesmenInfoFile() throws IOException {
        Map<String, Salesman> salesmen = new HashMap<>();
        File file = new File(SALESMEN_INFO_FILE_NAME);
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(";");
                if (parts.length == 4) {
                    String documentType = parts[0];
                    String documentNumber = parts[1];
                    String firstName = parts[2];
                    String lastName = parts[3];
                    
                    String key = documentType + ";" + documentNumber;
                    salesmen.put(key, new Salesman(documentType, documentNumber, firstName, lastName));
                }
            }
        }
        
        return salesmen;
    }
    
    /**
     * Processes all sales files and calculates total sales for each salesman and total quantity for each product.
     * 
     * @param products Map of product ID to Product object
     * @param salesmen Map of document number to Salesman object
     * @throws IOException If there's an error reading the files
     */
    private static void processSalesFiles(Map<String, Product> products, Map<String, Salesman> salesmen) throws IOException {
        File directory = new File(".");
        File[] files = directory.listFiles((dir, name) -> name.startsWith(SALESMAN_FILE_PREFIX) && name.endsWith(".txt"));
        
        if (files != null) {
            for (File file : files) {
                try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                    // Read salesman document information
                    String firstLine = reader.readLine();
                    if (firstLine == null) continue;
                    
                    String[] docParts = firstLine.split(";");
                    if (docParts.length != 2) continue;
                    
                    String documentType = docParts[0];
                    String documentNumber = docParts[1];
                    String key = documentType + ";" + documentNumber;
                    
                    Salesman salesman = salesmen.get(key);
                    if (salesman == null) continue;
                    
                    // Process sales
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split(";");
                        if (parts.length >= 2) {
                            String productId = parts[0];
                            int quantity = Integer.parseInt(parts[1]);
                            
                            Product product = products.get(productId);
                            if (product != null) {
                                // Update salesman's total sales
                                double saleAmount = product.getPrice() * quantity;
                                salesman.addSales(saleAmount);
                                
                                // Update product's total quantity sold
                                product.addQuantitySold(quantity);
                            }
                        }
                    }
                }
            }
        }
    }
    
    /**
     * Generates a report of salesmen sorted by sales amount (descending).
     * 
     * @param salesmen Map of document number to Salesman object
     * @throws IOException If there's an error writing the file
     */
    private static void generateSalesmenReport(Map<String, Salesman> salesmen) throws IOException {
        List<Salesman> salesmenList = new ArrayList<>(salesmen.values());
        
        // Sort salesmen by total sales (descending)
        Collections.sort(salesmenList, Comparator.comparing(Salesman::getTotalSales).reversed());
        
        // Write to report file
        File file = new File(SALESMEN_REPORT_FILE_NAME);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            for (Salesman salesman : salesmenList) {
                writer.write(salesman.getFirstName() + " " + salesman.getLastName() + ";" + 
                             String.format("%.2f", salesman.getTotalSales()));
                writer.newLine();
            }
        }
    }
    
    /**
     * Generates a report of products sorted by quantity sold (descending).
     * 
     * @param products Map of product ID to Product object
     * @throws IOException If there's an error writing the file
     */
    private static void generateProductsReport(Map<String, Product> products) throws IOException {
        List<Product> productsList = new ArrayList<>(products.values());
        
        // Sort products by quantity sold (descending)
        Collections.sort(productsList, Comparator.comparing(Product::getQuantitySold).reversed());
        
        // Write to report file
        File file = new File(PRODUCTS_REPORT_FILE_NAME);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            for (Product product : productsList) {
                writer.write(product.getName() + ";" + 
                             String.format("%.2f", product.getPrice()) + ";" +
                             product.getQuantitySold());
                writer.newLine();
            }
        }
    }
    
    /**
     * Inner class representing a Product with sales tracking.
     */
    private static class Product {
        private final String id;
        private final String name;
        private final double price;
        private int quantitySold;
        
        public Product(String id, String name, double price) {
            this.id = id;
            this.name = name;
            this.price = price;
            this.quantitySold = 0;
        }
        
        public String getId() {
            return id;
        }
        
        public String getName() {
            return name;
        }
        
        public double getPrice() {
            return price;
        }
        
        public int getQuantitySold() {
            return quantitySold;
        }
        
        public void addQuantitySold(int quantity) {
            this.quantitySold += quantity;
        }
    }
    
    /**
     * Inner class representing a Salesman with sales tracking.
     */
    private static class Salesman {
        private final String documentType;
        private final String documentNumber;
        private final String firstName;
        private final String lastName;
        private double totalSales;
        
        public Salesman(String documentType, String documentNumber, String firstName, String lastName) {
            this.documentType = documentType;
            this.documentNumber = documentNumber;
            this.firstName = firstName;
            this.lastName = lastName;
            this.totalSales = 0.0;
        }
        
        public String getDocumentType() {
            return documentType;
        }
        
        public String getDocumentNumber() {
            return documentNumber;
        }
        
        public String getFirstName() {
            return firstName;
        }
        
        public String getLastName() {
            return lastName;
        }
        
        public double getTotalSales() {
            return totalSales;
        }
        
        public void addSales(double amount) {
            this.totalSales += amount;
        }
    }
}